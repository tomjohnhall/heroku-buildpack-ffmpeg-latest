#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

header() {
  echo "" || true
  echo "-----> $*" || true
}

output() {
  while IFS= read -r LINE; do
    # do not indent headers that are being piped through the output
    if [[ "$LINE" =~ ^-----\>.* ]]; then
      echo "$LINE" || true
    else
      echo "       $LINE" || true
    fi
  done
}

header "Installing ffmpeg & libsndfile"

BUILD_DIR=${1:-}
VENDOR_DIR="vendor"
FFMPEG_ARCHIVE_NAME="ffmpeg.tar.xz"

cd $BUILD_DIR
mkdir -p $VENDOR_DIR
cd $VENDOR_DIR
mkdir -p ffmpeg
cd ffmpeg

if [[ -z $FFMPEG_DOWNLOAD_URL ]]; then
  echo "Variable FFMPEG_DOWNLOAD_URL isn't set, using default value" | output
  FFMPEG_DOWNLOAD_URL="https://johnvansickle.com/ffmpeg/builds/ffmpeg-git-amd64-static.tar.xz"
fi

echo "Downloading $FFMPEG_DOWNLOAD_URL" | output

code=$(curl "$FFMPEG_DOWNLOAD_URL" -L --silent --fail --retry 5 --retry-max-time 15 -o ./$FFMPEG_ARCHIVE_NAME --write-out "%{http_code}")

if [ "$code" != "200" ]; then
  echo "Unable to download ffmpeg: $code" | output && exit 1
fi

echo "Unpacking the archive" | output

tar xJf "./$FFMPEG_ARCHIVE_NAME" --strip-components=1

if [ "$?" != "0" ]; then
  echo "Failed to unpack ffmpeg" | output && exit 1
fi

rm $FFMPEG_ARCHIVE_NAME

PROFILE_PATH="$BUILD_DIR/.profile.d/ffmpeg.sh"
mkdir -p $(dirname $PROFILE_PATH)
echo 'export PATH="$PATH:${HOME}/vendor/ffmpeg"' >> $PROFILE_PATH

echo "FFMPEG Installation successful" | output

### additional libsndfile install

LIBSNDFILE_DOWNLOAD_URL=https://github.com/libsndfile/libsndfile/releases/download/1.1.0/libsndfile-1.1.0.tar.xz
LIBSNDFILE_ARCHIVE_NAME=libsndfile-1.1.0.tar.xz

cd ..
mkdir -p libsndfile
cd libsndfile


LSF_PROFILE_PATH="$BUILD_DIR/.profile.d/libsndfile.sh"
mkdir -p $(dirname $LSF_PROFILE_PATH)
echo 'export PATH="$PATH:${HOME}/vendor/libsndfile"' >> $LSF_PROFILE_PATH

echo 'export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:${HOME}/vendor/libsndfile"' >> $LSF_PROFILE_PATH


if [ -f "$2/vendor/bin/libsndfile" ]; then
	echo "Using cached build." | indent
	cp -R  "$2/vendor" $1
	exit 0
fi

echo "Downloading $LIBSNDFILE_DOWNLOAD_URL" | output

lsfcode=$(curl "$LIBSNDFILE_DOWNLOAD_URL" -L --silent --fail --retry 5 --retry-max-time 15 -o ./$LIBSNDFILE_ARCHIVE_NAME --write-out "%{http_code}")

if [ "$lsfcode" != "200" ]; then
  echo "Unable to download libsndfile: $code" | output && exit 1
fi

echo "Unpacking the lsf archive" | output

tar xJf "./$LIBSNDFILE_ARCHIVE_NAME" --strip-components=1

if [ "$?" != "0" ]; then
  echo "Failed to unpack libsndfile" | output && exit 1
fi

rm $LIBSNDFILE_ARCHIVE_NAME

cd libsndfile-1.1.0
./configure --prefix="$BUILD_DIR" >/dev/null 2>&1
make install >/dev/null 2>&1
make distclean > /dev/null 2>&1

echo "-----> Caching build."
mkdir -p $2
cp -R "$BUILD_DIR/" $2
